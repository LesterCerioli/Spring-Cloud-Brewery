buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "https://repo.spring.io/snapshot"
		}
		maven {
			url "https://repo.spring.io/milestone"
		}
		maven {
			url "https://repo.spring.io/release"
		}
		jcenter()
	}

	Closure<String> getProp = { String propName ->
		return System.properties[propName] ?:
				project.gradle.startParameter.systemPropertiesArgs.get(propName) ?:
						hasProperty(propName) ? getProperty(propName) :
						project.getProperty(propName) ?: ""
	}

	String bootVersion = getProp("BOOT_VERSION")
	logger.lifecycle("BOOT_VERSION is: [${bootVersion}]")

	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${bootVersion}"
		if (hasProperty("docker")) { classpath 'se.transmode.gradle:gradle-docker:1.2' }
	}
}

def commonProject = project(':common')
def commonZipkinProject = project(':common-zipkin')
def acceptanceTestsProject = project(':acceptance-tests')
def eurekaProject = project(':eureka')
def configServerProject = project(':config-server')
def gateway = project(':gateway')
def servers = [eurekaProject, configServerProject]
def techProjects = [commonProject, commonZipkinProject, acceptanceTestsProject,
					eurekaProject, configServerProject]
def nonZipkinProjects = techProjects
def nonDockerProjects = [commonProject, commonZipkinProject, acceptanceTestsProject]
def zipkinRelatedProjects = subprojects - nonZipkinProjects

allprojects {
	apply plugin: 'java'
}

configure(subprojects) {

	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	ext {
		beforeJubilee = Integer.parseInt(getProp("BOM_VERSION").split("\\.")[0]) < 2022
		jubileeOrLater = !beforeJubilee
		dockerConfiguration = { int port ->
			if (hasProperty("docker")) {
				int debugPort = port - 1000
				dependsOn 'build'
				dryRun true
				addFile("${libsDir}/${project.name}-${buildNrLoc}.jar", "/${project.name}/${project.name}.jar")
				exposePort(port)
				exposePort(debugPort)
				// Random beacuse of https://wiki.apache.org/tomcat/HowTo/FasterStartUp
				entryPoint(['java', '-Xmx64m', '-Xss1024k',
							"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$debugPort",
							'-Djava.security.egd=file:/dev/./urandom', '-jar', "/${project.name}/${project.name}.jar"])
			} else {
				getLogger().debug("docker property is not set")
			}
		}
		createDockerTaskWithPort = { int port ->
			if (hasProperty("docker")) {
				project.task([type: Docker], "docker", ext.dockerConfiguration.curry(port))
			} else {
				getLogger().debug("docker property is not set")
			}
		}
		systemPropsFromGradle = {
			project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
		}
		systemPropsFromGradleContains = { String key ->
			project.gradle.startParameter.systemPropertiesArgs.containsKey(key)
		}
		whatToTest = { String propName ->
			String whatToTestProp = "WHAT_TO_TEST"
			return propName.equalsIgnoreCase(project.gradle.startParameter.systemPropertiesArgs.get(whatToTestProp)) ?:
					propName.equalsIgnoreCase(System.getenv(whatToTestProp))
		}
		cloudFoundrySet = {
			String cloudFoundryProp = "CLOUD_FOUNDRY"
			return "true".equalsIgnoreCase(getProp(cloudFoundryProp))
		}
		propOrSysEnvPresent = { String propName ->
			project.hasProperty(propName) || systemPropsFromGradleContains(propName) || System.getenv(propName.toUpperCase())
		}
		moduleEnabled = { boolean enabled ->
			if (!enabled) {
				project.tasks*.enabled = false
			}
		}
		buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "1.0.0"
	}

	group = 'io.spring.cloud.samples.brewery'
	version = buildNrLoc

	sourceCompatibility = beforeJubilee ? '1.8' : '17'

	if (jubileeOrLater && whatToTest('SLEUTH')) {
		throw new IllegalStateException("You've picked SLEUTH as thing to test but you're using the train 2022 that has removed Sleuth!")
	}

	configurations {
		all {
			resolutionStrategy {
				eachDependency { DependencyResolveDetails details ->
					// To prevent an accidental usage of groovy-all.jar and groovy.jar in different versions
					// all modularized Groovy jars are replaced with groovy-all.jar by default.
					if (details.requested.group == 'org.codehaus.groovy' && details.requested.name != "groovy-all") {
						details.useTarget("org.codehaus.groovy:groovy-all:${details.requested.version}")
					}
				}
			}
		}
	}

	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "https://repo.spring.io/snapshot"
		}
		maven {
			url "https://repo.spring.io/milestone"
		}
		maven {
			url "https://repo.spring.io/release"
		}
	}

	dependencyManagement {
		imports {
			Closure<String> getProp = { String propName -> System.properties[propName] ?:
					project.gradle.startParameter.systemPropertiesArgs.get(propName) ?:
							hasProperty(propName) ? property(propName) :
									System.getenv(propName) ?: project.getProperty(propName) ?: ""
			}
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${getProp("BOM_VERSION") }"
			if (getProp("BOOT_VERSION")) {
				String bootVersion = getProp("BOOT_VERSION")
				logger.lifecycle("Using boot in version [${bootVersion}]")
				mavenBom "org.springframework.boot:spring-boot-dependencies:${bootVersion}"
			}
			if (ext.whatToTest('SCS')) mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${getProp("SCS_VERSION")}"
		}
	}

	task allDeps(type: DependencyReportTask) {}
}

logger.lifecycle("WHAT_TO_TEST is: System prop: [${project.gradle.startParameter.systemPropertiesArgs.get("WHAT_TO_TEST")}] , Env prop: [${System.getenv("WHAT_TO_TEST")}]")
logger.lifecycle("CLOUD_FOUDRY set: [${System.getenv("CLOUD_FOUNDRY")}]")
logger.lifecycle("BOM_VERSION is: [${getProp("BOM_VERSION")}]")

configure(subprojects - gateway - acceptanceTestsProject - servers) {

	dependencies {
		implementation "org.springframework.boot:spring-boot-starter-web"
		if (beforeJubilee) {
			implementation "org.springframework.cloud:spring-cloud-starter-sleuth"
		}
		if (getProp("BOM_VERSION").startsWith("202")) {
			implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
		}
		implementation "org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j"
		implementation "org.springframework.cloud:spring-cloud-starter-stream-${propOrSysEnvPresent('kafka') ? 'kafka' : 'rabbit'}"
		implementation "org.springframework.amqp:spring-amqp"
		implementation "io.dropwizard.metrics:metrics-core"
		implementation "io.dropwizard.metrics:metrics-graphite"

		testImplementation(group: 'org.springframework.cloud', name: 'spring-cloud-stream', classifier: 'test-binder')
	}
}

configure(zipkinRelatedProjects) {

	dependencies {
		if (whatToTest('WAVEFRONT')) {
			implementation("com.wavefront:wavefront-spring-boot-starter:${getProp("WAVEFRONT_VERSION")}") {
				exclude group: 'org.springframework.boot'
			}
		}
		if (whatToTest('SLEUTH')) { implementation "org.springframework.cloud:spring-cloud-sleuth-zipkin" }
	}
}

configure(nonDockerProjects) {

	bootJar {
		enabled = false
	}
	jar {
		enabled = true
	}

	bootRun {
		enabled = false
	}
}

if (hasProperty("docker")) {
	configure(subprojects - nonDockerProjects) {

		apply plugin: 'docker'

		docker {
			baseImage 'frolvlad/alpine-oraclejdk8'
		}
	}
}

configure(subprojects - commonProject - servers - gateway) {
	dependencies {
		implementation(commonProject)
	}
}

configure(subprojects - techProjects - commonZipkinProject - gateway) {
	dependencies {
		if (whatToTest('SLEUTH')) {
			implementation commonZipkinProject
		}
		implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
	}
}

configure(subprojects - techProjects - commonZipkinProject) {
	dependencies {
		implementation "org.springframework.boot:spring-boot-starter-actuator"
		implementation 'com.fasterxml.jackson.core:jackson-databind'
		if (!cloudFoundrySet() && !whatToTest('CONSUL') && !whatToTest('EUREKA') && !whatToTest('SCS')) {
			implementation "org.springframework.cloud:spring-cloud-starter-zookeeper-discovery"
		}
		if (whatToTest('CONSUL')) { implementation "org.springframework.cloud:spring-cloud-starter-consul-discovery" }
		if (whatToTest('EUREKA') || cloudFoundrySet()) {
			implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
		}
		implementation 'org.apache.commons:commons-lang3:3.4'
		implementation 'com.jayway.jsonpath:json-path-assert:2.0.0'
		implementation 'org.yaml:snakeyaml'
//        implementation 'org.hibernate:hibernate-validator'
		implementation "org.aspectj:aspectjrt"

		implementation 'cglib:cglib-nodep:3.1'
		implementation 'org.objenesis:objenesis:2.2'
		implementation 'org.aspectj:aspectjweaver'
	}

	bootRun {
		jvmArgs = systemPropsFromGradle()
	}

	test {
		jvmArgs systemPropsFromGradle()
		testLogging {
			exceptionFormat = 'full'
			showStandardStreams = true
		}
	}
}

String getProp(String propName) {
	return System.properties[propName] ?:
			project.gradle.startParameter.systemPropertiesArgs.get(propName) ?:
					hasProperty(propName) ? property(propName) :
							System.getenv(propName) ?: ""
}
